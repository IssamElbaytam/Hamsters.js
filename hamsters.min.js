/*
* Title: WebHamsters
* Description: Javascript library to add multi-threading support to javascript by exploiting concurrent web workers
* Author: Austin K. Smith 
* Contact: austin@asmithdev.com
* Copyright: 2015 Austin K. Smith - austin@asmithdev.com
* License: Artistic License 2.0
*/
var hamsters={version:"2.0",debug:false,maxThreads:Math.ceil((navigator.hardwareConcurrency||1)*1.25),tools:{},runtime:{legacy:false,queue:{running:[],pending:[]},tasks:[],errors:[],setup:{}}};hamsters.runtime.wakeUp=function(){hamsters.tools.isIE=function(version){return(new RegExp("msie"+(!isNaN(version)?("\\s"+version):""),"i").test(navigator.userAgent))};hamsters.runtime.setup.isLegacy=function(){if(!window.Worker||navigator.userAgent.indexOf("Kindle/3.0")!==-1||navigator.userAgent.indexOf("Mobile/8F190")!==-1||navigator.userAgent.indexOf("IEMobile")!==-1||hamsters.tools.isIE(10)){hamsters.runtime.legacy=true}else{if(navigator.userAgent.toLowerCase().indexOf("firefox")!==-1){window.firefox=window.firefox||true}}};hamsters.isLegacy=function(){return hamsters.runtime.legacy};hamsters.checkErrors=function(){var errors=hamsters.runtime.errors||[];return{msg:"There are currently "+errors.length+" errors captured in the runtime",total:errors.length,errors:errors}};hamsters.tools.splitArray=function(array,n){if(array.length&&!array.slice){array=hamsters.runtime.convertArray(array)}var tasks=[];var i=0;if(array){var len=array.length;var size=Math.ceil((len/n));while(i<len){tasks.push(array.slice(i,i+=size))}return tasks}return[]};hamsters.tools.randomArray=function(count,callback){if(!count||!callback){hamsters.runtime.errors=hamsters.runtime.errors.concat({msg:"Unable to generate random array, missing required params"});return}var params={count:count};hamsters.run(params,function(){var total=params.count;var i=0;while(i<total){rtn.data[rtn.data.length]=Math.round(Math.random()*(100-1)+1);i++}},function(output){if(callback){callback(output)}},1,false,"Int32")};hamsters.runtime.setup.populateElements=function(count,callback){for(var i=0,len=count;i<len;i++){hamsters.runtime.setup.getOrCreateElement(i)}if(callback){callback.call()}};hamsters.runtime.setup.getOrCreateElement=function(id){var script=(document.getElementById("hamster"+id)||null);if(!script){var work=hamsters.runtime.giveHamsterWork();script=document.createElement("script");script.type=("javascript/worker");script.id=("hamster"+id);script.text="("+work.toString()+"());";document.getElementsByTagName("head")[0].appendChild(script);return script}return script};hamsters.runtime.giveHamsterWork=function(){var work=function(){var params;var respond=function(rtn,msg){if(params.dataType){var output=processDataType(params.dataType,rtn.data);rtn.data=output.buffer;rtn.dataType=params.dataType;self.postMessage({results:rtn||null,msg:msg||""},[output.buffer])}else{self.postMessage({results:rtn||null,msg:msg||""})}};var processDataType=function(dataType,buffer){if(!dataType){return buffer}var arr;switch(dataType.toLowerCase()){case"uint32":arr=new Uint32Array(buffer);break;case"uint16":arr=new Uint16Array(buffer);break;case"uint8":arr=new Uint8Array(buffer);break;case"uint8clamped":arr=new Uint8ClampedArray(buffer);break;case"int32":arr=new Int32Array(buffer);break;case"int16":arr=new Int16Array(buffer);break;case"int8":arr=new Int8Array(buffer);break;case"float32":arr=new Float32Array(buffer);break;case"float64":arr=new Float64Array(buffer);break;default:arr=buffer;break}return arr};self.onmessage=function(e){var rtn={success:true,data:[]};params=e.data;if(typeof params==="string"){params=JSON.parse(e.data)}if(params.dataType&&params.array&&typeof params.array==="object"){params.array=processDataType(params.dataType,params.array)}if(params.fn){var fn=eval("("+params.fn+")");if(fn&&typeof fn==="function"){fn();respond(rtn)}else{rtn.success=false;rtn.error="Missing function";rtn.msg="Error encounted check errors for details";respond(rtn)}}}};return work};hamsters.runtime.sort=function(property){if(hamsters.debug==="verbose"){console.info("Sorting array using index: "+property)}var order=1;if(property[0]==="-"){order=-1;property=property.substr(1)}return function(a,b){var result=(a[property]<b[property])?-1:(a[property]>b[property])?1:0;return result*order}};hamsters.run=function(params,fn,callback,workers,aggregate,dataType){if(!params||!fn){return"Error processing for loop, missing params or function"}var taskid=hamsters.runtime.tasks.length;workers=workers||hamsters.maxThreads;hamsters.runtime.tasks.push({id:taskid,workers:[],count:0,threads:workers,input:[],output:[],callback:callback});var task=hamsters.runtime.tasks[taskid];callback=(callback||null);var hamsterfood={array:[]};var key;for(key in params){if(params.hasOwnProperty(key)){if(key!=="array"){hamsterfood[key]=params[key]}}}hamsterfood.fn=fn.toString();hamsterfood.dataType=dataType||null;var workArray=params.array||null;if(params.array&&task.threads!==1){workArray=hamsters.tools.splitArray(params.array,task.threads)}var i=0;while(i<task.threads){if(workArray&&task.threads!==1){hamsters.runtime.newWheel(workArray[i],hamsterfood,aggregate,callback,taskid,i)}else{hamsters.runtime.newWheel(workArray,hamsterfood,aggregate,callback,taskid,i)}i++}};hamsters.runtime.newWheel=function(inputArray,hamsterfood,aggregate,callback,taskid,threadid,hamster,dataBlob){var task=hamsters.runtime.tasks[taskid];if(!task){hamsters.runtime.errors.push({msg:"Error, unable to match thread to task, throwing exception",params:hamsterfood,aggregate:aggregate,callback:callback});console.error("Error, unable to match thread to task "+taskid+", throwing exception. Check errors for more details");return}var queue=hamsters.runtime.queue;if(hamsters.maxThreads&&hamsters.maxThreads<=queue.running.length){queue.pending.push({input:inputArray,params:hamsterfood,workerid:threadid,callback:callback,taskid:taskid,aggregate:aggregate});return}var thread=(threadid||task.count);var debug=hamsters.debug;if(debug){task.input.push({input:inputArray,workerid:thread,taskid:taskid,params:hamsterfood,start:new Date().getTime()});if(debug==="verbose"){console.info("Spawning Hamster #"+thread+" @ "+new Date().getTime())}}if(hamsters.isLegacy()){hamsters.runtime.legacyProcessor(hamsterfood,inputArray,function(output){task.count++;task.output[threadid]=output.data;if(task.count===task.threads){var rtn=hamsters.runtime.getOutput(task.output);hamsters.runtime.tasks[taskid]=null;if(aggregate){rtn=hamsters.tools.aggregate(rtn,null)}if(callback){if(debug){console.info("Execution Complete! Elapsed: "+((new Date().getTime()-task.input[0].start)/1000)+"s")}callback(rtn)}}});return}task.workers[task.workers.length]=thread;queue.running[queue.running.length]=thread;var blobObject=(dataBlob||null);var hamsterData;if(!hamster){hamsterData=hamsters.runtime.createHamster(thread);hamster=hamsterData.worker;blobObject={blob:hamsterData.dataBlob,uri:hamsterData.blobUri}}hamsters.runtime.trainHamster(thread,aggregate,callback,taskid,thread,hamster,blobObject);hamsters.runtime.feedHamster(hamster,hamsterfood,inputArray);task.count++};hamsters.runtime.legacyProcessor=function(food,inputArray,callback){setTimeout(function(){var params=food;var rtn={success:true,data:[]};if(params.fn){params.array=inputArray;var fn=eval("("+params.fn+")");if(fn&&typeof fn==="function"){try{fn();if(callback){callback(rtn)}}catch(exception){rtn.success=false;rtn.error=exception;rtn.msg="Error encounted check errors for details";if(callback){callback(rtn)}}}}},4)};hamsters.runtime.createHamster=function(thread){var hamster=hamsters.runtime.setup.getOrCreateElement(thread);var blob=hamsters.runtime.createBlob(hamster.textContent);var uri=window.URL.createObjectURL(blob);hamster=new Worker(uri);return{worker:hamster,dataBlob:blob,blobUri:uri}};hamsters.runtime.sendRequest=function(type,url,responseType,callback){var xhr=new XMLHttpRequest();xhr.open(type,url);xhr.responseType=responseType;xhr.onload=function(){callback(this.response)};xhr.send()};hamsters.runtime.fetchArrayBuffer=function(string,callback){var url=window.URL.createObjectURL(hamsters.runtime.createBlob(string));hamsters.runtime.sendRequest("GET",url,"arraybuffer",function(arrayBuffer){if(callback){callback(arrayBuffer)}})};hamsters.runtime.createBlob=function(textContent){var blob;try{blob=new Blob([textContent],{type:"application/javascript"})}catch(err){var BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder;if(BlobBuilder){blob=new BlobBuilder();blob.append([textContent],{type:"application/javascript"});blob=blob.getBlob()}}return blob};hamsters.tools.aggregate=function(input,dataType){if(!input){console.error("Missing array");return}if(input.length>20){return input}if(dataType){var out=[];for(var i=0,len=input.length;i<len;i++){out.push(hamsters.runtime.convertArray(input[i]))}input=out}var output=[];output=input.reduce(function(a,b){return a.concat(b)});return output};hamsters.runtime.getOutput=function(output,aggregate,dataType){var rtn;if(aggregate){rtn=hamsters.tools.aggregate(output,dataType)}else{rtn=output}return rtn};hamsters.runtime.processQueue=function(hamster,dataBlob){var item=hamsters.runtime.queue.pending.shift();if(item){hamsters.runtime.newWheel(item.input,item.params,item.aggregate,item.callback,item.taskid,item.workerid,hamster,dataBlob)}};hamsters.runtime.terminateHamster=function(dataBlob){if(dataBlob){window.URL.revokeObjectURL(dataBlob.uri);if(dataBlob.blob){var close=(dataBlob.blob.close||dataBlob.blob.msClose);if(close){close.call()}else{delete dataBlob.blob}}dataBlob=null}};hamsters.runtime.trainHamster=function(id,aggregate,callback,taskid,workerid,hamster,dataBlob){hamster.onmessage=function(e){var queue=hamsters.runtime.queue;if(queue.pending.length===0){hamster.terminate();setTimeout(hamsters.runtime.terminateHamster(dataBlob),4)}queue.running.splice(queue.running.indexOf(id),1);var task=hamsters.runtime.tasks[taskid];if(!task){hamsters.runtime.errors=hamsters.runtime.errors.concat({timeStamp:e.timeStamp,msg:"Error, unable to match thread to task, throwing exception",taskid:taskid,workerid:workerid,aggregate:aggregate,callback:callback});console.error("Fatal Exception, unable to match thread #"+workerid+" to task #"+taskid+", cannot continue. Check errors for more details");return}task.workers.splice(task.workers.indexOf(workerid),1);var taskComplete=false;if(task.workers.length===0&&task.count===task.threads){taskComplete=true}var results=e.data.results;if(results.dataType&&typeof results.data==="object"){results.data=hamsters.runtime.processDataType(results.dataType,results.data)}task.output[workerid]=results.data;var debug=hamsters.debug;if(debug==="verbose"){console.info("Hamster #"+id+" finished @ "+e.timeStamp)}if(taskComplete){var output=hamsters.runtime.getOutput(task.output,aggregate,results.dataType);hamsters.runtime.tasks[taskid]=null;if(callback){if(debug){console.info("Execution Complete! Elapsed: "+((e.timeStamp-task.input[0].start)/1000)+"s")}callback(output)}}if(queue.pending.length!==0){hamsters.runtime.processQueue(hamster,dataBlob)}};hamster.onerror=function(e){hamster.terminate();var msg="Error Hamster #"+id+": Line "+e.lineno+" in "+e.filename+": "+e.message;hamsters.runtime.errors=hamsters.runtime.errors.concat({msg:msg});console.error(msg)}};hamsters.runtime.convertArray=function(input){var arr=[];for(var n=0,len=input.length;n<len;n++){arr.push(input[n])}return arr};hamsters.runtime.processDataType=function(dataType,buffer){if(!dataType){return buffer}var arr;switch(dataType.toLowerCase()){case"uint32":arr=new Uint32Array(buffer);break;case"uint16":arr=new Uint16Array(buffer);break;case"uint8":arr=new Uint8Array(buffer);break;case"uint8clamped":arr=new Uint8ClampedArray(buffer);break;case"int32":arr=new Int32Array(buffer);break;case"int16":arr=new Int16Array(buffer);break;case"int8":arr=new Int8Array(buffer);break;case"float32":arr=new Float32Array(buffer);break;case"float64":arr=new Float64Array(buffer);break;default:arr=buffer;break}return arr};hamsters.runtime.feedHamster=function(hamster,food,inputArray){if(inputArray&&food.dataType){food.array=hamsters.runtime.processDataType(food.dataType,inputArray)}else{if(inputArray){food.array=inputArray}}if(food.array&&food.array.buffer){var buffer=food.array.buffer;food.array=buffer;hamster.postMessage(food,[buffer])}else{if((window.chrome||window.firefox)&&food.array.length<=35000000){hamster.postMessage(JSON.stringify(food))}else{hamster.postMessage(food)}}};hamsters.runtime.setup.isLegacy();hamsters.runtime.setup.populateElements(hamsters.maxThreads)};hamsters.runtime.wakeUp();