/*
* Title: WebHamsters
* Description: Javascript library to add multi-threading support to javascript by exploiting concurrent web workers
* Author: Austin K. Smith 
* Contact: austin@asmithdev.com
* Copyright: 2015 Austin K. Smith - austin@asmithdev.com
* License: Artistic License 2.0
*/
var hamsters={version:"3.0",debug:false,cache:false,maxThreads:Math.ceil((navigator.hardwareConcurrency||1)*1.25),tools:{},wheel:{legacy:false,queue:{running:[],pending:[]},tasks:[],errors:[],uri:null}};self.wakeUp=function(){self.isIE=function(version){return(new RegExp("msie"+(!isNaN(version)?("\\s"+version):""),"i").test(navigator.userAgent))};self.isLegacy=function(callback){try{if(!window.Worker||navigator.userAgent.indexOf("Kindle/3.0")!==-1||navigator.userAgent.indexOf("Mobile/8F190")!==-1||navigator.userAgent.indexOf("IEMobile")!==-1||self.isIE(10)){hamsters.wheel.legacy=true}}catch(e){}callback(hamsters.wheel.legacy)};hamsters.tools.checkErrors=function(){var errors=hamsters.wheel.errors||[];return{msg:"There are currently "+errors.length+" errors captured in the wheel",total:errors.length,errors:errors}};hamsters.tools.splitArray=function(array,n){var tasks=[];var i=0;if(array){var len=array.length;var size=Math.ceil(len/n);while(i<len){if(array.slice){tasks.push(array.slice(i,i+=size))}else{tasks.push(array.subarray(i,i+=size))}}return tasks}return[]};hamsters.tools.randomArray=function(count,callback){if(!count||!callback){hamsters.wheel.errors.push({msg:"Unable to generate random array, missing required params"});return}var params={count:count};hamsters.run(params,function(){var total=params.count;var i=0;while(i<total){rtn.data[rtn.data.length]=Math.round(Math.random()*(100-1)+1);i+=1}},function(output){callback(output)},1,false,"Int32",false)};hamsters.wheel.checkCache=function(hash,dataType){var item;var i=0;var len=sessionStorage.length;for(i;i<len;i+=1){item=JSON.parse(sessionStorage[i]);if(item&&item["#"]===hash&&item.dT===dataType){var rtn=item.oP;if(dataType!=="na"&&!hamsters.wheel.legacy){rtn=hamsters.wheel.processDataType(dataType,item.oP)}return rtn}}};hamsters.wheel.memoize=function(fn,input,output,dataType){var hash=hamsters.wheel.hashResult({func:fn,dT:dataType,input:input});if(hamsters.wheel.checkCache(hash,dataType)){return}try{sessionStorage.setItem(sessionStorage.length,JSON.stringify({"#":hash,dT:dataType,oP:output}))}catch(eve){if(eve.name==="QuotaExceededError"){sessionStorage.clear();try{sessionStorage.setItem(sessionStorage.length,JSON.stringify({"#":hash,dT:dataType,oP:output}))}catch(e){return}}}};hamsters.wheel.compareArrays=function(array1,array2){if(array1.length!==array2.length){return false}return array1.every(function(el,i){return(el===array2[i])})};self.populateElements=function(){if(!hamsters.wheel.uri){var blob=self.createBlob("("+String(self.giveHamsterWork())+"());");hamsters.wheel.uri=window.URL.createObjectURL(blob)}};self.giveHamsterWork=function(){var work=function(){var params,output;var respond=function(rtn,msg){if(params.dataType!=="na"){output=processDataType(params.dataType,rtn.data);rtn.data=output.buffer;rtn.dataType=params.dataType;self.postMessage({results:rtn||null,msg:msg||""},[output.buffer])}else{self.postMessage({results:rtn||null,msg:msg||""})}};var processDataType=function(dataType,buffer){if(dataType==="uint32"){return new Uint32Array(buffer)}if(dataType==="uint16"){return new Uint16Array(buffer)}if(dataType==="uint8"){return new Uint8Array(buffer)}if(dataType==="uint8clamped"){return new Uint8ClampedArray(buffer)}if(dataType==="int32"){return new Int32Array(buffer)}if(dataType==="int16"){return new Int16Array(buffer)}if(dataType==="int8"){return new Int8Array(buffer)}if(dataType==="float32"){return new Float32Array(buffer)}if(dataType==="float64"){return new Float64Array(buffer)}return buffer};self.onmessage=function(e){var rtn={success:true,data:[]};params=e.data;if(typeof params==="string"){params=JSON.parse(e.data)}if(params.dataType!=="na"&&typeof params.array==="object"){params.array=processDataType(params.dataType,params.array)}var fn=eval("("+params.fn+")");if(fn){fn();respond(rtn)}else{rtn.success=false;rtn.error="Missing function";rtn.msg="Error encounted check errors for details";respond(rtn)}}};return work};hamsters.wheel.sort=function(arr,order){if(order==="desc"){return Array.prototype.sort.call(arr,function(a,b){return b-a})}if(order==="asc"){return Array.prototype.sort.call(arr,function(a,b){return a-b})}if(order==="ascAlpha"){return arr.sort()}if(order==="descAlpha"){return arr.reverse()}};hamsters.run=function(params,fn,callback,workers,aggregate,dataType,memoize,order){if(!params||!fn){return"Error processing for loop, missing params or function"}var taskid=hamsters.wheel.tasks.length;workers=workers||hamsters.maxThreads;hamsters.wheel.newTask(taskid,workers,order,dataType,fn,callback);var task=hamsters.wheel.tasks[taskid];callback=(callback||null);var hamsterfood={array:[]};hamsterfood.fn=fn.toString();if(dataType){dataType=dataType.toLowerCase()}else{dataType="na"}if(hamsters.cache&&params.array&&params.array.length!==0){memoize=memoize||true;var hash=hamsters.wheel.hashResult({func:fn,dT:"na",input:params.array});var result=hamsters.wheel.checkCache(hash,dataType);if(result&&callback){setTimeout(function(){callback(result);hamsters.wheel.tasks[taskid]=null},4);return}}var key;for(key in params){if(params.hasOwnProperty(key)&&key!=="array"){hamsterfood[key]=params[key]}}hamsterfood.dataType=dataType;var workArray=params.array||null;if(params.array&&task.threads!==1){workArray=hamsters.tools.splitArray(params.array,task.threads)}var i=0;while(i<task.threads){if(workArray&&task.threads!==1){hamsters.wheel.newWheel(workArray[i],hamsterfood,aggregate,callback,taskid,i,null,memoize)}else{hamsters.wheel.newWheel(workArray,hamsterfood,aggregate,callback,taskid,i,null,memoize)}i+=1}};hamsters.wheel.newTask=function(taskid,workers,order,dataType,fn,callback){hamsters.wheel.tasks.push({id:taskid,workers:[],count:0,threads:workers,input:[],dataType:dataType||null,fn:fn||null,output:[],order:order||null,callback:callback})};hamsters.wheel.trackInput=function(task,inputArray,thread,taskid,hamsterfood){task.input.push({input:inputArray,workerid:thread,taskid:taskid,params:hamsterfood,start:new Date().getTime()})};hamsters.wheel.poolThread=function(queue,inputArray,hamsterfood,threadid,callback,taskid,aggregate,memoize){queue.pending.push({memoize:memoize,input:inputArray,params:hamsterfood,workerid:threadid,callback:callback,taskid:taskid,aggregate:aggregate})};hamsters.wheel.trackThread=function(task,queue,thread){task.workers[task.workers.length]=thread;queue.running[queue.running.length]=thread};hamsters.wheel.legacyProcessor=function(food,inputArray,callback){setTimeout(function(){var params=food;var rtn={success:true,data:[]};var respond=function(rtn){callback(rtn)};params.array=inputArray;var fn=eval("("+params.fn+")");if(fn){fn();respond(rtn)}else{rtn.success=false;rtn.error="Missing function";rtn.msg="Error encounted check errors for details";respond(rtn)}},4)};hamsters.wheel.createHamster=function(){return new Worker(hamsters.wheel.uri)};self.createBlob=function(textContent){if(Blob){return new Blob([textContent],{type:"application/javascript"})}var BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder;if(BlobBuilder){var blob=new BlobBuilder();blob.append([textContent],{type:"application/javascript"});blob=blob.getBlob();return blob}};hamsters.tools.aggregate=function(input,dataType){if(input.length>20){return input}if(dataType){return hamsters.wheel.aggregateTypedArrays(input,dataType)}return input.reduce(function(a,b){return a.concat(b)})};hamsters.wheel.getOutput=function(output,aggregate,dataType){if(aggregate){return hamsters.tools.aggregate(output,dataType)}return output};hamsters.wheel.processQueue=function(hamster){var item=hamsters.wheel.queue.pending.shift();if(item){hamsters.wheel.newWheel(item.input,item.params,item.aggregate,item.callback,item.taskid,item.workerid,hamster,item.memoize)}};hamsters.wheel.terminateHamster=function(dataBlob){if(!dataBlob){return}if(dataBlob.close){dataBlob.close()}else{if(dataBlob.msClose){dataBlob.msClose()}else{if(dataBlob.slice){dataBlob=dataBlob.slice(0,0)}}}};hamsters.wheel.trainHamster=function(id,aggregate,callback,taskid,workerid,hamster,memoize){hamster.onmessage=function(e){var queue=hamsters.wheel.queue;if(queue.pending.length===0){setTimeout(function(){hamster.terminate()},4)}queue.running.splice(queue.running.indexOf(id),1);var task=hamsters.wheel.tasks[taskid];if(!task){hamsters.wheel.errors=hamsters.wheel.errors.concat({timeStamp:e.timeStamp,msg:"Error, unable to match thread to task, throwing exception",taskid:taskid,workerid:workerid,aggregate:aggregate,callback:callback});console.error("Fatal Exception, unable to match thread #"+workerid+" to task #"+taskid+", cannot continue. Check errors for more details");return}task.workers.splice(task.workers.indexOf(workerid),1);var results=e.data.results;if(results.dataType!=="na"&&typeof results.data==="object"){results.data=hamsters.wheel.processDataType(results.dataType,results.data)}task.output[workerid]=results.data;if(task.workers.length===0&&task.count===task.threads){var output=hamsters.wheel.getOutput(task.output,aggregate,results.dataType);if(hamsters.debug){console.info("Execution Complete! Elapsed: "+((e.timeStamp-task.input[0].start)/1000)+"s")}if(task.order){callback(hamsters.wheel.sort(output,task.order))}else{callback(output)}hamsters.wheel.tasks[taskid]=null;if(hamsters.cache&&memoize!==false){var inputArray=task.input[0].input;if(output.length>0&&!results.dataType){setTimeout(function(){hamsters.wheel.memoize(task.fn,inputArray,output,"na")},4)}else{if(output.length>0&&results.dataType){setTimeout(function(){hamsters.wheel.memoize(task.fn,inputArray,hamsters.wheel.normalizeArray(output),results.dataType)},4)}}}}else{if(hamsters.debug==="verbose"){console.info("Hamster #"+id+" finished @ "+e.timeStamp)}}if(queue.pending.length!==0){hamsters.wheel.processQueue(hamster)}};hamster.onerror=function(e){hamster.terminate();var msg="Error Hamster #"+id+": Line "+e.lineno+" in "+e.filename+": "+e.message;hamsters.wheel.errors=hamsters.wheel.errors.concat({msg:msg});console.error(msg)}};hamsters.wheel.normalizeArray=function(input){var arr=[];var n=0;var len=input.length;for(n;n<len;n+=1){arr.push(input[n])}return arr};hamsters.wheel.aggregateTypedArrays=function(input,dataType){var i=0;var len=input.length;var bufferLength=0;for(i;i<len;i+=1){bufferLength+=input[i].length}var output=hamsters.wheel.processDataType(dataType,bufferLength);var offset=0;for(i=0;i<len;i+=1){output.set(input[i],offset);offset+=input[i].length}return output};hamsters.wheel.processDataType=function(dataType,buffer){if(dataType==="uint32"){return new Uint32Array(buffer)}if(dataType==="uint16"){return new Uint16Array(buffer)}if(dataType==="uint8"){return new Uint8Array(buffer)}if(dataType==="uint8clamped"){return new Uint8ClampedArray(buffer)}if(dataType==="int32"){return new Int32Array(buffer)}if(dataType==="int16"){return new Int16Array(buffer)}if(dataType==="int8"){return new Int8Array(buffer)}if(dataType==="float32"){return new Float32Array(buffer)}if(dataType==="float64"){return new Float64Array(buffer)}return buffer};hamsters.wheel.generateHash=function(string){string=String(string);var hash=0;var i=string.length-1;for(i;i>=0;i--){hash+=(((hash<<5)-hash)+string.charCodeAt(i))&4294967295}return hash};hamsters.wheel.hashResult=function(obj){var result=0;for(var key in obj){if(obj.hasOwnProperty(key)){if(typeof obj[key]==="object"&&obj[key].length&&!obj[key].slice){result+=hamsters.wheel.generateHash(key+String(hamsters.wheel.normalizeArray(obj[key])))}else{result+=hamsters.wheel.generateHash(key+obj[key])}}}return result};hamsters.wheel.feedHamster=function(hamster,food,inputArray){if(inputArray&&food.dataType){food.array=hamsters.wheel.processDataType(food.dataType,inputArray)}else{if(inputArray){food.array=inputArray}}if(food.array&&food.array.buffer){var buffer=food.array.buffer;food.array=buffer;hamster.postMessage(food,[buffer])}else{hamster.postMessage(food)}};self.isLegacy(function(legacy){if(legacy){hamsters.wheel.newWheel=function(inputArray,hamsterfood,aggregate,callback,taskid,threadid,hamster,memoize){var task=hamsters.wheel.tasks[taskid];if(!task){hamsters.wheel.errors.push({msg:"Error, unable to match thread to task, throwing exception",params:hamsterfood,aggregate:aggregate,callback:callback});console.error("Error, unable to match thread to task "+taskid+", throwing exception. Check errors for more details");return}var debug=hamsters.debug;hamsters.wheel.legacyProcessor(hamsterfood,inputArray,function(output){task.count+=1;task.output[threadid]=output.data;if(task.count===task.threads){var rtn=hamsters.wheel.getOutput(task.output,aggregate,output.dataType);if(debug){console.info("Execution Complete! Elapsed: "+((new Date().getTime()-task.input[0].start)/1000)+"s")}callback(rtn);hamsters.wheel.tasks[taskid]=null;if(hamsters.cache&&memoize!==false){if(output.data.length>0&&!output.dataType){setTimeout(function(){hamsters.wheel.memoize(task.fn,task.input,output.data,"na")},4)}else{if(output.data.length>0&&output.dataType){setTimeout(function(){hamsters.wheel.memoize(task.fn,task.input,hamsters.wheel.normalizeArray(output.data),output.dataType)},4)}}}}});return}}else{hamsters.wheel.newWheel=function(inputArray,hamsterfood,aggregate,callback,taskid,threadid,hamster,memoize){var task=hamsters.wheel.tasks[taskid];if(!task){hamsters.wheel.errors.push({msg:"Error, unable to match thread to task, throwing exception",params:hamsterfood,aggregate:aggregate,callback:callback});console.error("Error, unable to match thread to task "+taskid+", throwing exception. Check errors for more details");return}var queue=hamsters.wheel.queue;if(hamsters.maxThreads&&hamsters.maxThreads<=queue.running.length){hamsters.wheel.poolThread(queue,inputArray,hamsterfood,threadid,callback,taskid,aggregate,memoize);return}var thread=(threadid||task.count);var debug=hamsters.debug;if(debug||memoize){hamsters.wheel.trackInput(task,inputArray,thread,taskid,hamsterfood);if(debug==="verbose"){console.info("Spawning Hamster #"+thread+" @ "+new Date().getTime())}}hamsters.wheel.trackThread(task,queue,thread);if(!hamster){hamster=hamsters.wheel.createHamster()}hamsters.wheel.trainHamster(thread,aggregate,callback,taskid,thread,hamster,memoize);hamsters.wheel.feedHamster(hamster,hamsterfood,inputArray);task.count+=1};self.populateElements()}})};self.wakeUp();